"""    思路：        1、使用selenium模拟登陆，携带登陆的cookie进行请求网页；        2、针对反爬控制速度；        3、"""import jsonimport reimport pymysqlimport requestsimport timefrom lxml import etreefrom selenium import webdriverimport randomclass GetCookie:    def __init__(self):        self.option = webdriver.ChromeOptions()        self.option.add_argument('--user-agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36"')  # 设置成用户自己的数据目录        self.driver = webdriver.Chrome(chrome_options=self.option)        self.start_url = 'https://login.aliexpress.com'        self.search_url = 'https://www.aliexpress.com/af/iPhone-11-case.html?d=y&origin=y&catId=0&initiative_id=SB_20190912015343&SearchText=iPhone%2011%20case&switch_new_app=y'        self.host = '120.78.2.234'        self.database = 'Best_Sellers'        self.user = 'root'        self.password = 'root'        self.port = 3306        self.table = 'aliexpress'        self.db = pymysql.connect(self.host, self.user, self.password, self.database, port=self.port)        self.cursor = self.db.cursor()    def get_cookie_from_ali_cn(self, username, pdw):        self.driver.get(self.start_url)  # 开始url        time.sleep(3)        try:            login_frame = self.driver.find_element_by_id('alibaba-login-box')  # 定位frame元素            self.driver.switch_to.frame(login_frame)            self.driver.find_element_by_id('fm-login-id').send_keys(username)            time.sleep(random.randint(1, 3))            self.driver.find_element_by_id("fm-login-password").send_keys(pdw)            time.sleep(random.randint(1, 3))            self.driver.find_element_by_class_name('password-login').click()            time.sleep(random.randint(3, 5))            url = self.driver.current_url            if 'login' not in url:                print(url)                print("登录成功😁😁😁")            else:                print("还是登录失败😂😂😂")        except Exception as e:            print("登录失败😂😂😂")            raise e    def get_cookie(self):        # u_info = conf.user_info        # cookie_lis = []        # for u in u_info:        #     self.get_cookie_from_ali_cn(u['email'], u['pwd'])        #     cookies = self.driver.get_cookies()        #     self.driver.quit()        #     cookie_lis.append(cookies)        # return cookie_lis        # u_info = conf.user_info        # cookie_lis = []        # for u in u_info:        self.get_cookie_from_ali_cn('zhangj_0827@163.com', '929639916zj')        cookies = self.driver.get_cookies()        self.driver.quit()        return cookies    def request_session(self, cookies):        request = requests.session()        for cookie in cookies:            request.cookies.set(cookie['name'], cookie['value'])        return request    def request_parse(self, req, url, page=1):        request = req        response = request.get(url)        with open('aa11.html', 'w')as f:            f.write(response.content.decode())        print(response.url)        # print(response)        response = etree.HTML(response.content.decode())        # lis = response.xpath('//div[@id="hs-list-items"]/ul[@id="hs-below-list-items"]/li')        lis = response.xpath('//div[@class="list-wrap product-list"]/ul[@class="list-items"]/li')        print(lis)        for index, li in enumerate(lis):            item = {}            # 获取产品链接            item['key_word'] = 'guitar'            item['page'] = page            item['number'] = index+1            item['link'] = 'https:' + li.xpath('.//a[@class="item-title"]')[0]            item['product_id'] = re.match('.*?/item/.*?/(.*?).html.*?', item['link'], re.S).group(1)            # print(item)            url = item['link']            self.product_detail(url, request, item)            time.sleep(random.uniform(0.5,2))        """        https://www.aliexpress.com/af/iPhone-11-case.html?d=y&origin=y&catId=0&initiative_id=SB_20190912015343&SearchText=iPhone%2011%20case&switch_new_app=y        https://www.aliexpress.com/af/iPhone-11-case.html?ltype=affiliate&d=y&CatId=0&SearchText=iPhone+11+case&trafficChannel=af&SortType=default&page=2        https://www.aliexpress.com/af/iPhone-11-case.html?ltype=affiliate&d=y&CatId=0&SearchText=iPhone+11+case&trafficChannel=af&SortType=default&page=1        """        url_page_base = 'https://www.aliexpress.com/af/iPhone-11-case.html?ltype=affiliate&d=y&CatId=0&SearchText=iPhone+11+case&trafficChannel=af&SortType=default&page={}'        for page in range(2, 81):            next_page_url = url_page_base.format(page)            self.request_parse(request, url=next_page_url, page=page)            time.sleep(10)        # # 获取下一页链接        # next_page = response.xpath(        #     '//div[@class="ui-pagination-navi util-left"]/a[@class="page-next ui-pagination-next"]/@href')        # if next_page:        #     next_page_url = 'https:' + response.xpath(        #         '//div[@class="ui-pagination-navi util-left"]/a[@class="page-next ui-pagination-next"]/@href')[0]        #     print("+" * 100)        #     print(next_page_url)        #     print("-" * 100)        #     page = re.match('.*?&page=([\d]+).*?', next_page_url, re.S).group(1)        #     if int(page) <= 100:        #         self.request_parse(request, url=next_page_url, page=page)        #         time.sleep(10)    # 解析详情页内容    def product_detail(self, url, request, item):        response = request.get(url).content.decode()        # response = etree.HTML(response)        # data = re.match('.*?data: ({.*?})csrfToken:.*?',response. re.S)        try:            data = json.loads(re.match(r""".*data: ({.*}.*}),.*csrfToken:.*""", response, re.S).group(1))        except Exception as e:            print('正在重新抓取中...............................')            print(e)            self.product_detail(url, request, item)        else:            # 产品标题            try:                item['title'] = data['titleModule']['subject']            except:                item['title'] = None            # 店铺全名            try:                item['store_name'] = data['storeModule']['storeName']            except:                item['store_name'] = None            # 店铺编号            try:                item['store_num'] = data['storeModule']['storeNum']            except:                item['store_num'] = None            # # 店铺链接            try:                item['store_url'] = data['storeModule']['storeURL']                if 'https:' not in item['store_url']:                    item['store_url'] = 'https:' + item['store_url']                else:                    pass            except:                item['store_url'] = None            # # 开店时间            try:                item['store_open_date'] = data['storeModule']['openTime']            except:                item['store_open_date'] = None            # # 发货地址            try:                item['shipping_address'] = data['storeModule']['countryCompleteName']            except:                item['shipping_address'] = None            # # 店铺Positive_feedback            try:                item['store_positive_feedback'] = data['storeModule']['positiveRate']            except:                item['store_positive_feedback'] = None            # # 平均星级            try:                item['product_average_star'] = data['titleModule']['feedbackRating']['averageStar']            except:                item['product_average_star'] = None            # # 五星数量            try:                item['product_five_star_num'] = data['titleModule']['feedbackRating']['fiveStarNum']            except:                item['product_five_star_num'] = None            # # 五星占比            try:                item['product_five_star_rate'] = data['titleModule']['feedbackRating']['fiveStarRate']            except:                item['product_five_star_rate'] =None            # # 四星数量            try:                item['product_four_star_num'] = data['titleModule']['feedbackRating']['fourStarNum']            except:                item['product_four_star_num'] = None            # # 四星占比            try:                item['product_four_star_rate'] = data['titleModule']['feedbackRating']['fourStarRate']            except:                item['product_four_star_rate'] = None            # # 三星数量            try:                item['product_three_star_num'] = data['titleModule']['feedbackRating']['threeStarNum']            except:                item['product_three_star_num'] = None            # # 三星占比            try:                item['product_three_star_rate'] = data['titleModule']['feedbackRating']['threeStarRate']            except:                item['product_three_star_rate'] = None            # # 二星数量            try:                item['product_two_star_num'] = data['titleModule']['feedbackRating']['twoStarNum']            except:                item['product_two_star_num'] = None            # # 二星占比            try:                item['product_two_star_rate'] = data['titleModule']['feedbackRating']['twoStarRate']            except:                item['product_two_star_rate'] = None            # # 一星数量            try:                item['product_one_star_num'] = data['titleModule']['feedbackRating']['oneStarNum']            except:                item['product_one_star_num'] = None            # # 一星占比            try:                item['product_one_star_rate'] = data['titleModule']['feedbackRating']['oneStarRate']            except:                item['product_one_star_rate'] = None            # # 总评论数            try:                item['product_total_valid_num'] = data['titleModule']['feedbackRating']['totalValidNum']            except:                item['product_total_valid_num'] = None            # # 总订单数            try:                item['product_trade_count'] = data['titleModule']['tradeCount']            except:                item['product_trade_count'] = None            # # 粉丝数            try:                item['product_following_number'] = data['storeModule']['followingNumber']            except:                item['product_following_number'] = None            # # 好感数            try:                item['item_wished_count'] = data['actionModule']['itemWishedCount']            except:                item['item_wished_count'] = None            # # 原价max            try:                item['maxActivityAmount'] = data['priceModule']['maxActivityAmount']['value']            except:                item['maxActivityAmount'] = None            # # 原价min            try:                item['minActivityAmount'] = data['priceModule']['minActivityAmount']['value']            except:                item['minActivityAmount'] = None            # # 折扣价max            try:                item['maxAmount'] = data['priceModule']['maxAmount']['value']            except:                item['maxAmount'] = None            # # 折扣价min            try:                item['minAmount'] = data['priceModule']['minAmount']['value']            except:                item['minAmount'] = None            # # 折扣率            try:                item['discount'] = data['priceModule']['discount']            except:                item['discount'] = None            # 变体            print(item)            # data_dict = dict(item)            # keys = ', '.join(data_dict.keys())            # values = ', '.join(['%s'] * len(data_dict))            # sql = 'insert into %s (%s) values (%s);' % (self.table, keys, values)            # # print(sql)            # # print(tuple(data_dict.values()))            # self.cursor.execute(sql, tuple(data_dict.values()))            # self.db.commit()            with open('ali.json', 'a+', encoding='utf8') as f:                json.dump(dict(item), f, ensure_ascii=False)                f.write('\n')    # 保存数据到数据库中或者Excel中    def run(self):        url = self.search_url        cookies = self.get_cookie()        request = self.request_session(cookies)        self.request_parse(request, url)        self.db.close()if __name__ == '__main__':    start_time = time.time()    spider = GetCookie()    spider.run()    end_time = time.time()    print('采集共用%sS'%(int(end_time)-int(start_time)))